using Microsoft.Azure.Storage;
using Microsoft.Azure.Storage.Blob;
using System;
using System.Threading.Tasks;

namespace BlobStorage
{
    class Program
    {
        static void Main(string[] args)
        {
            Console.WriteLine("Move items between Containers Demo!");
            Task.Run(async () => await StartContainersDemo()).Wait();
            Console.WriteLine("Move items between Storage Accounts Demo!");
            Task.Run(async () => await StartAccountDemo()).Wait();
        }

        public static async Task StartContainersDemo()
        {
            string sourceBlobFileName = "IMG_0055.JPG";
            AppSettings appSettings = AppSettings.LoadAppSettings();

            //Get a cloud client for the source Storage Account
            CloudBlobClient sourceClient = Common.CreateBlobClientStorageFromSAS
            (appSettings.SourceSASToken, appSettings.SourceAccountName);

            //Get a reference for each container
            var sourceContainerReference = sourceClient.GetContainerReference(appSettings.SourceContainerName);
            var destinationContainerReference = sourceClient.GetContainerReference
            (appSettings.DestinationContainerName);

            //Get a reference for the source blob
            var sourceBlobReference = sourceContainerReference.GetBlockBlobReference
            (sourceBlobFileName);
            var destinationBlobReference = destinationContainerReference.GetBlockBlobReference
            (sourceBlobFileName);

            //Get the lease status of the source blob
            await sourceBlobReference.FetchAttributesAsync();
            System.Console.WriteLine($"Lease status: {sourceBlobReference.Properties.LeaseStatus}" +
                        $"\tstate: {sourceBlobReference.Properties.LeaseState}" +
                        $"\tduration: {sourceBlobReference.Properties.LeaseDuration}");
            //Acquire an infinite lease. If you want to set a duration for the lease use
            //TimeSpan.FromSeconds(seconds). Remember that seconds should be a value
            //between 15 and 60.
            //We need to save the lease ID automatically generated by Azure for release
            //the lease later.
            string leaseID = Guid.NewGuid().ToString();
            await sourceBlobReference.AcquireLeaseAsync(null, leaseID);

            await sourceBlobReference.FetchAttributesAsync();
            System.Console.WriteLine($"Lease status: {sourceBlobReference.Properties.LeaseStatus}" +
                        $"\tstate: {sourceBlobReference.Properties.LeaseState}" +
                        $"\tduration: {sourceBlobReference.Properties.LeaseDuration}");
                        //Move the blob from the source container to the destination container
                        await destinationBlobReference.StartCopyAsync(sourceBlobReference);
            await sourceBlobReference.DeleteAsync();
            await sourceBlobReference.ReleaseLeaseAsync(AccessCondition.GenerateLeaseCondition(leaseID));

            await sourceBlobReference.FetchAttributesAsync();
            System.Console.WriteLine($"Lease status: {sourceBlobReference.Properties.LeaseStatus}" +
                        $"\tstate: {sourceBlobReference.Properties.LeaseState}" +
                        $"\tduration: {sourceBlobReference.Properties.LeaseDuration}");


        }

        public static async Task StartAccountDemo()
        {
            string sourceBlobFileName = "InsuranceIDCard.pdf";
            AppSettings appSettings = AppSettings.LoadAppSettings();

            //Get a cloud client for the source Storage Account
            CloudBlobClient sourceClient = Common.CreateBlobClientStorageFromSAS
            (appSettings.SourceSASToken, appSettings.SourceAccountName);
            //Get a cloud client for the destination Storage Account
            CloudBlobClient destinationClient = Common.CreateBlobClientStorageFromSAS(appSettings.DestinationSASToken, appSettings.DestinationAccountName);

            //Get a reference for each container
            var sourceContainerReference = sourceClient.GetContainerReference(appSettings.
            SourceContainerName);
            var destinationContainerReference = destinationClient.GetContainerReference
            (appSettings.DestinationContainerName);

            //Get a reference for the source blob
            var sourceBlobReference = sourceContainerReference.GetBlockBlobReference
            (sourceBlobFileName);
            var destinationBlobReference = destinationContainerReference.
            GetBlockBlobReference(sourceBlobFileName);
            //Move the blob from the source container to the destination container
            await destinationBlobReference.StartCopyAsync(sourceBlobReference);
            await sourceBlobReference.DeleteAsync();
        }
    }
}
